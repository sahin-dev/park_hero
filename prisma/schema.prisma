// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  email       String  @unique
  fullName    String?
  phone       String?
  password    String
  fcmToken    String?
  accessToken String? 
  avatarUrl   String?

  address     String?
  location       cords?
  walletId    String    @db.ObjectId    @unique

  googleId    String?
  appleId     String?
  role       UserRole
  vehicles   Vehicle[]
  reviews    Review[]
  favourites Favourite[]
  parkingPlaces   ParkingPlace[]
  bookings        Booking[]
  wallet         Wallet @relation(fields: [walletId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}


model Wallet {
  id          String @id @default(auto()) @map("_id")  @db.ObjectId
  balance     Float  @default(0.0)
  
  user User?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Otp {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId

  userId    String      @db.ObjectId    @unique

  code    String?

  expiry   DateTime?

  createdAt DateTime    @default(now())

  updatedAt DateTime    @updatedAt

  @@map("otps")
}

model Vehicle {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  company    String
  model      String
  reg_number String   @unique
  color      String[]
  ownerId    String   @db.ObjectId
  owner      User     @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model ParkingPlace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  cords  cords
  status    PlaceStatus  @default(Pending)
  address   String
  amenities String[]
  description     String
  gallery   String[]
  ownerId  String    @db.ObjectId
  price     Float
  priceUnit  String
  billingCycle  String
  totalSpots     Int
  
  owner     User    @relation(fields: [ownerId], references: [id])
  reviews       Review[]
  favourites    Favourite[]
  parking_spots ParkingSpot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parking_places")
}

model ParkingSpot {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  spot_name        String
  parking_place_id String @db.ObjectId
  availability    Boolean @default(true)

  parkingPlace ParkingPlace @relation(fields: [parking_place_id], references: [id])
  parkingBookings Booking[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("parking_spots")
}

model Review {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  rating           Int
  text             String
  reviewer_id      String       @db.ObjectId
  parking_place_id String       @db.ObjectId
  reviewer         User         @relation(fields: [reviewer_id], references: [id])
  parkingPlace     ParkingPlace @relation(fields: [parking_place_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}


model Booking {

  id          String      @id @default(auto())  @map("_id")  @db.ObjectId
  spot_id     String    @db.ObjectId
  user_id    String     @db.ObjectId
  status     BookingStatus  @default(PENDING)

  spot      ParkingSpot   @relation(fields: [spot_id], references: [id])
  user      User          @relation(fields: [user_id], references: [id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("bookings")
}

model Favourite {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  user_id          String @db.ObjectId
  parking_place_id String @db.ObjectId

  user User         @relation(fields: [user_id], references: [id])
  spot ParkingPlace @relation(fields: [parking_place_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user_id, parking_place_id])

  @@map("favourites")
}


enum cords {
  lat
  long
}

enum PlaceStatus {
  Pending
  Accepted
  Rejected
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}


enum BookingStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELED
}